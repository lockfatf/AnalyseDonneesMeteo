res_pca <- PCA(decathlon[,1:10], ncp = 5, scale.unit = TRUE, graph=FALSE)
res_pca
clash_dataset %>%
replace_na(list(Count = 1)) -> clash_dataset
clash_dataset
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {
(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))
}
)
mystandardisation <-apply(clash_dataset[,5:11], 2, FUN = function(x) {
(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))
}
)
clash_dataset
View(clash_dataset)
mystandardisation <-apply(clash_dataset[,5:11], 2, FUN = function(x) {
(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))
}
)
mystandardisation <-apply(clash_dataset[,7:11], 2, FUN = function(x) {
(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))
}
)
mystandardisation
mystandardisation <-apply(clash_dataset[,7:17], 2, FUN = function(x) {
(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))
}
)
mystandardisation
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
row.names(clash_dataset_preproc) <- clash_dataset$Name
mystandardisation
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
summary(clash_dataset)
as.numeric(clash_dataset)
as.numeric(clash_dataset[,1])
clash_dataset$Name.as.vector
clash_dataset$Name.as.vector()
clash_dataset$Name.as.factor()
as.factor(clash_dataset$Name)
summary(clash_dataset)
clash_dataset$Name<-as.factor(clash_dataset$Name)
summary(clash_dataset)
clash_dataset$Name<-as.numeric(clash_dataset$Name)
summary(clash_dataset)
clash_dataset$Name<-as.factor(clash_dataset$Name)
summary(clash_dataset)
clash_dataset
clash_dataset[,2:6]<-as.factor(clash_dataset[,2:6])
clash_dataset[2:6,]<-as.factor(clash_dataset[2:6,])
clash_dataset[2,]<-as.factor(clash_dataset[2,])
clash_dataset$Target<-as.factor(clash_dataset$Target)
summary(clash_dataset)
clash_dataset
clash_dataset$Type<-as.factor(clash_dataset$Type)
clash_dataset
clash_dataset$Transport<-as.factor(clash_dataset$Transport)
clash_dataset$Rarity<-as.factor(clash_dataset$Rarity)
clash_dataset
clash_dataset$Speed_chr<-as.factor(clash_dataset$Speed_chr)
mystandardisation
clash_dataset
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
View(clash_dataset)
View(clash_dataset)
data(clash_dataset)
clash_dataset$Target<-as.factor(clash_dataset$Target)
clash_dataset$Type<-as.factor(clash_dataset$Type)
clash_dataset$Name<-as.factor(clash_dataset$Name)
clash_dataset$Transport<-as.factor(clash_dataset$Transport)
clash_dataset$Rarity<-as.factor(clash_dataset$Rarity)
clash_dataset$Speed_chr<-as.factor(clash_dataset$Speed_chr)
clash_dataset
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {if(is.numeric(x){(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation
# dplyr::mutate_if is used to apply the fonction only on numeric (quantitatives) variables
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
# to retrieve indivudual Names on FactoMineR outputs
row.names(clash_dataset_preproc) <- clash_dataset$Name
mystandardisation
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {if(is.numeric(x){(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))}else{x})
mystandardisation
# dplyr::mutate_if is used to apply the fonction only on numeric (quantitatives) variables
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
# to retrieve indivudual Names on FactoMineR outputs
row.names(clash_dataset_preproc) <- clash_dataset$Name
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {if(is.numeric(x))(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))else(x)
mystandardisation
# dplyr::mutate_if is used to apply the fonction only on numeric (quantitatives) variables
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
# to retrieve indivudual Names on FactoMineR outputs
row.names(clash_dataset_preproc) <- clash_dataset$Name
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x))
mystandardisation
# dplyr::mutate_if is used to apply the fonction only on numeric (quantitatives) variables
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
# to retrieve indivudual Names on FactoMineR outputs
row.names(clash_dataset_preproc) <- clash_dataset$Name
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x))
mystandardisation
# dplyr::mutate_if is used to apply the fonction only on numeric (quantitatives) variables
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
# to retrieve indivudual Names on FactoMineR outputs
row.names(clash_dataset_preproc) <- clash_dataset$Name
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})mystandardisation
mystandardisation <-apply(clash_dataset, 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation <-apply(clash_dataset[7:17,], 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation <-apply(clash_dataset[,7:17], 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation
mystandardisation
row.names(clash_dataset_preproc) <- clash_dataset$Name
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
clash_dataset %>%
replace_na(list(Count = 1)) -> clash_dataset
clash_dataset %>% mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
clash_dataset %>%
mutate_if(.predicate = is.numeric(), mystandardisation) -> clash_dataset_preproc
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
row.names(mystandardisation) <- clash_dataset$Name
mystandardisation
mystandardisation <-apply(clash_dataset[,7:17], 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation
row.names(mystandardisation) <- clash_dataset$Name
mystandardisation
clash_dataset_preproc<-mystandardisation
clash_dataset_preproc
clash_dataset %>%
mutate_if(.predicate = is.numeric, mystandardisation) -> clash_dataset_preproc
clash_dataset %>%
mutate_if(.predicate = is.numeric(), mystandardisation) -> clash_dataset_preproc
cost_idx <- which(colnames(clash_dataset_preproc %>% select_if(is.numeric)) == "Cost")
summary(clash_dataset_preproc)
clash_dataset_preproc
View(clash_dataset_preproc)
View(clash_dataset_preproc)
cost_idx <- which(colnames(clash_dataset_preproc %>% select_if(is.numeric)) == "Cost")
cost_idx <- which(colnames(mystandardisation %>% select_if(is.numeric)) == "Cost")
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Cost")
cost_idx
res_pca_quantiSup<-PCA(clash_dataset_preproc, ncp = 5, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup= costindex)ncp = 5, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup= cost_idx)ncp = 5, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup= cost_idx,ncp = 5, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup
res_pca_quantiSup$var
res_pca_quantiSup$ind
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup= cost_idx,ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = clash_dataset_preproc[cost_idx,],ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = clash_dataset_preproc[1,],ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = clash_dataset_preproc[cost_idx],ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup<-PCA(clash_dataset_preproc, quali.sup = clash_dataset_preproc[cost_idx],ncp = 10, scale.unit = TRUE, graph=FALSE)
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Cost")
cost_idx
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Name")
cost_idx
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Target")
cost_idx
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Cost")
cost_idx
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = cost_idx,ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup
barplot(res_pca_quantiSup$eig[,2])
fviz_pca_var(res_pca_quantiSup, axes=c(1,3), repel = TRUE)
fviz_pca_var(res_pca_quantiSup, axes=c(1,2), repel = TRUE)
data(clash_dataset)
clash_dataset$Target<-as.factor(clash_dataset$Target)
clash_dataset$Type<-as.factor(clash_dataset$Type)
clash_dataset$Name<-as.factor(clash_dataset$Name)
clash_dataset$Transport<-as.factor(clash_dataset$Transport)
clash_dataset$Rarity<-as.factor(clash_dataset$Rarity)
clash_dataset$Speed_chr<-as.factor(clash_dataset$Speed_chr)
mystandardisation <-apply(clash_dataset[,7:17], 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation
row.names(mystandardisation) <- clash_dataset$Name
clash_dataset_preproc<-mystandardisation
clash_dataset_preproc
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Cost")
cost_idx
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = cost_idx,ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup
fviz_pca_var(res_pca_quantiSup, axes=c(1,2), repel = TRUE)
data(clash_dataset)
head(clash_dataset)
library(FactoMineR)
library(factoextra)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
clash_dataset %>%
replace_na(list(Count = 1)) -> clash_dataset
summary(clash_dataset)
clash_dataset$Target<-as.factor(clash_dataset$Target)
clash_dataset$Type<-as.factor(clash_dataset$Type)
clash_dataset$Name<-as.factor(clash_dataset$Name)
clash_dataset$Transport<-as.factor(clash_dataset$Transport)
clash_dataset$Rarity<-as.factor(clash_dataset$Rarity)
clash_dataset$Speed_chr<-as.factor(clash_dataset$Speed_chr)
clash_dataset
mystandardisation <-apply(clash_dataset[,7:17], 2, FUN = function(x) {(x - mean(x))/sqrt(sum((x-mean(x))^2/length(x)))})
mystandardisation
row.names(mystandardisation) <- clash_dataset$Name
clash_dataset_preproc<-mystandardisation
clash_dataset_preproc
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Cost")
cost_idx <- which(colnames(clash_dataset %>% select_if(is.numeric)) == "Cost")
cost_idx
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = cost_idx,ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup
fviz_pca_var(res_pca_quantiSup, axes=c(1,2), repel = TRUE)
res_pca_quantiSup$var$contrib
res_pca_quantiSup$var
res_pca_quantiSup<-PCA(clash_dataset_preproc, quanti.sup = cost_idx,ncp = 10, scale.unit = TRUE, graph=FALSE)
res_pca_quantiSup
fviz_pca_var(res_pca_quantiSup, axes=c(1,2), repel = TRUE)
ACP_MAX = PCA(clash_dataset[,c(7:11,13,15,17)]) #sans les min
summary(ACP_MAX)
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
summary(ACP_MAX)
plot(res_pca_quantiSup, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
ACP_MAX = PCA(clash_dataset[,c(6:11,13,15,17)],quali.sup=1:6) #sans les min
summary(ACP_MAX)
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
summary(ACP_MAX)
ACP_MAX = PCA(clash_dataset[,c(6:11,13,15,17)],quali.sup=6) #sans les min
summary(ACP_MAX)
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
ACP_MAX = PCA(clash_dataset[,c(6:11,13,15,17)],quali.sup=6) #sans les min
summary(ACP_MAX)
ACP_MAX = PCA(clash_dataset[,c(6:11,13,15,17)],quali.sup=6) #sans les min
ACP_MAX = PCA(clash_dataset[,c(6:11,13,15,17)],quali.sup=1:6) #sans les min
summary(ACP_MAX)
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
ACP_MAX = PCA(clash_dataset[,c(6:11,13,15,17)],quali.sup=6) #sans les min
ACP_MAX = PCA(clash_dataset[,c(7:11,13,15,17)],quali.sup=6) #sans les min
summary(ACP_MAX)
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y")
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y",axes=3:4)
plot(ACP_MAX, cex=0.8, habillage=6, select="cos2 0.6", cex.main=1.1, cex.axis=0.9, shadow=TRUE, auto="y",axes=c(3,4))
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = TRUE)
dataset = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
library(scales)
library(ggplot2)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
dataset = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
df <- clash_dataset %>% dplyr::select(-Count, -Level_max)
df <- df[,6:15]
dataset = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
lda_fit <- MASS::lda(formula = Rarity ~ . , data = df)
plda <- predict(object = lda_fit, newdata = df)
prop_lda = lda_fit$svd^2/sum(lda_fit$svd^2)
dataset = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
library(scales)
library(ggplot2)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
p1
pca_fit <- prcomp(df[,-1],
center = TRUE,
scale. = TRUE)
prop_pca = pca_fit$sdev^2/sum(pca_fit$sdev^2)
dataset = data.frame(Rarity = df[,"Rarity"], pca = pca_fit$x, lda = plda$x)
library(scales)
library(gridExtra)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
p2 <- ggplot(dataset) + geom_point(aes(pca.PC1, pca.PC2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("PC1 (", percent(prop_pca[1]), ")", sep=""),
y = paste("PC2 (", percent(prop_pca[2]), ")", sep="")) +
theme_bw() +
labs(title = "PCA", subtitle = "clash dataset")
gridExtra::grid.arrange(p1,p2)
library(mda802)
library(MASS)
data("clash_dataset")
df <- clash_dataset %>% dplyr::select(-Count, -Level_max)
df <- df[,6:15]
lda_fit <- MASS::lda(formula = Rarity ~ . , data = df)
plda <- predict(object = lda_fit, newdata = df)
prop_lda = lda_fit$svd^2/sum(lda_fit$svd^2)
dataset = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
library(scales)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
pca_fit <- prcomp(df[,-1],
center = TRUE,
scale. = TRUE)
prop_pca = pca_fit$sdev^2/sum(pca_fit$sdev^2)
dataset = data.frame(Rarity = df[,"Rarity"], pca = pca_fit$x, lda = plda$x)
library(scales)
library(gridExtra)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
p2 <- ggplot(dataset) + geom_point(aes(pca.PC1, pca.PC2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("PC1 (", percent(prop_pca[1]), ")", sep=""),
y = paste("PC2 (", percent(prop_pca[2]), ")", sep="")) +
theme_bw() +
labs(title = "PCA", subtitle = "clash dataset")
gridExtra::grid.arrange(p1,p2)
train_index <- sample.int(n = 39, size = 0.8*41, replace = F)
train = df[train_index,]
test <- setdiff(df, train)
lda_fit <- MASS::lda(formula = train$Rarity ~ . , data = train)
plda <- predict(object = lda_fit, newdata = test)
prop_lda = lda_fit$svd^2/sum(lda_fit$svd^2)
dataset_2 = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
p3 <- ggplot(dataset_2) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "AFD TRAIN", subtitle = "clash dataset")
p3
dataset_2 = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
dataset_2 = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
plda <- predict(object = lda_fit, newdata = test)
prop_lda = lda_fit$svd^2/sum(lda_fit$svd^2)
dataset_2 = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
train_index <- sample.int(n = 39, size = 0.8*41, replace = F)
train = df[train_index,]
test <- setdiff(df, train)
lda_fit <- MASS::lda(formula = train$Rarity ~ . , data = train)
plda <- predict(object = lda_fit, newdata = test)
prop_lda = lda_fit$svd^2/sum(lda_fit$svd^2)
dataset_2 = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
library(MASS)
df <- clash_dataset[,c(6:9,12:15)]
lda_fit <- MASS::lda(df$Rarity~., data=df)
plda <- predict(object = lda_fit, newdata = df)
prop_lda = lda_fit$svd^2 / sum(lda_fit$svd^2)
df <- clash_dataset %>% dplyr::select(-Count, -Level_max)
df <- df[,6:15]
lda_fit <- MASS::lda(formula = Rarity ~ . , data = df)
plda <- predict(object = lda_fit, newdata = df)
prop_lda = lda_fit$svd^2/sum(lda_fit$svd^2)
summary(lda_fit)
lda_fit
dataset = data.frame(Rarity = df[,"Rarity"], lda = plda$x)
library(scales)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
p1
pca_fit <- prcomp(df[,-1],
center = TRUE,
scale. = TRUE)
prop_pca = pca_fit$sdev^2/sum(pca_fit$sdev^2)
dataset = data.frame(Rarity = df[,"Rarity"], pca = pca_fit$x, lda = plda$x)
library(scales)
library(gridExtra)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("LD1 (", percent(prop_lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop_lda[2]), ")", sep="")) +
theme_bw() +
labs(title = "LDA", subtitle = "clash dataset")
p2 <- ggplot(dataset) + geom_point(aes(pca.PC1, pca.PC2, colour = Rarity, shape = Rarity), size = 2.5) +
labs(x = paste("PC1 (", percent(prop_pca[1]), ")", sep=""),
y = paste("PC2 (", percent(prop_pca[2]), ")", sep="")) +
theme_bw() +
labs(title = "PCA", subtitle = "clash dataset")
gridExtra::grid.arrange(p1,p2)
set.seed(5)
Sample_Ligne <- sample.int(n = 39 , size = round(0.8*39) , replace = F)
train_df <- df[Sample_Ligne,]
test_df  <- df[-Sample_Ligne,]
library(FactoMineR)
acp_df=PCA(train_df[,1:8],quali.sup=1, scale.unit = TRUE)
classif_df = HCPC(acp_df,nb.clust = 4)
classif_df = HCPC(acp_df,nb.clust = 4)
classif_df_train = HCPC(acp_df_train, nb.clust = 4)
classif_df = HCPC(acp_df,nb.clust = 4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = TRUE)
library(mda802)
library(MASS)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = TRUE)
devtools::install_github("UMC800/UMC802-MDA")
library(mda802)
data(mushrooms)
mushrooms
library(mda802)
data(mushrooms)
data(mushrooms)
data("mushrooms"")
data("mushrooms"")
data(mushrooms)
data(mushrooms)
mushrooms
head(mushrooms)
devtools::install_github("UMC800/UMC802-MDA")
library(mda802)
data(mushrooms)
mushrooms
summary(mushrooms)
library(mda802)
install.packages("mda802")
install.packages("mda802")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = TRUE)
data(mushrooms)
library("mda802", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("mda802", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
data(mushrooms)
summary(mushrooms)
?table
mushrooms_ctg <- table(mushrooms[,4],mushrooms[,7])
mushrooms_ctg
mushrooms_ctg <- table(mushrooms[,c(4,7)])
mushrooms_ctg
mushrooms_freq <- prop.table(mushrooms_ctg)
mushrooms_freq
head(mushrooms_freq, 3)
mushrooms_freq
mushrooms_ctg <- table(mushrooms[,c(4,7)])
head(mushrooms_ctg)
knitr::include_graphics('./chi2.jpg')
chisq.test(mushrooms_ctg)
mushrooms_freq_r <- prop.table(mushrooms_ctg, 1)
mushrooms_freq_c <- prop.table(mushrooms_ctg, 2)
chisq.test(mushrooms_ctg)
afc <- FactoMineR::CA(mushrooms_ctg, graph = FALSE)
afc
factoextra::fviz_ca_biplot(afc)
factoextra::fviz_ca_biplot(afc)
factoextra::fviz_ca_biplot(afc)
shiny::runApp('Documents/GitHub/twinsol/Arkadin/WebApp_Shiny')
runApp('Documents/GitHub/twinsol/Arkadin/WebApp_Shiny')
runApp('Documents/GitHub/twinsol/Arkadin/WebApp_Shiny')
runApp('Documents/GitHub/twinsol/Arkadin/WebApp_Shiny')
runApp('Documents/GitHub/twinsol/Arkadin/WebApp_Shiny')
runApp('Documents/GitHub/twinsol/demodashboard')
library(data.table)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(rgl)
library(caret)
library(rgl)
climat <- fread("climat.201708.csv",data.table = F)
climat <- fread("../Données/climat.201708.csv",data.table = F)
getwd()
setwd(/Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo)
setwd(Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo)
setwd(~/Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo)
setwd(~Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo)
setwd("~Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo")
setwd("Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo")
setwd("/Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo")
climat <- fread("climat.201708.csv",data.table = F)
climat <- fread("climat.201708.csv",data.table = F)
villes <- fread("postesSynop.csv",data.table=F)
setwd("/Users/florianlockfat/Documents/GitHub/AnalyseDonneesMeteo")
climat <- fread("climat.201708.csv",data.table = F)
climat <- fread("Données/climat.201708.csv",data.table = F)
villes <- fread("Données/postesSynop.csv",data.table=F)
climat <- merge(climat,villes,by="NUM_POSTE")
row.names(climat) <- climat$Nom
climat <- climat[,-c(1,55)]
idx_bad_col <- which(apply(climat,2,function(x){sum(is.na(x))})> (dim(climat)[1]/10))
near_zero_var <- nzv(climat, freqCut = 90/10)
climat_rm_na <- climat[,-c(idx_bad_col,near_zero_var,which(colnames(climat)=="FXAB"))]
idx_bad_row <-  which(apply(climat_rm_na,1,function(x){sum(is.na(x))}) > 0)
climat_rm_na <- climat_rm_na[-idx_bad_row,]
View(climat_rm_na)
climat <- fread("Données/climat.201708.csv",data.table = F)
villes <- fread("Données/postesSynop.csv",data.table=F)
climat <- merge(climat,villes,by="NUM_POSTE")
row.names(climat) <- climat$Nom
climat <- climat[,-c(1,55)]
climat
View(climat)
mtcars
data = mtcars
View(data)
View(data)
